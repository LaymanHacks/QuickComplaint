//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using QuickComplaint.Data.Entities;
using QuickComplaint.Data.Repository;

namespace QuickComplaint.Web.UI.Controllers.Api
{
    public class ComplaintApiController : ApiController
    {
        private readonly IComplaintRepository _dbRepository;
        private readonly IReportingPartyRepository _dbReportingPartyRepository;

        public ComplaintApiController(IComplaintRepository dbRepository, IReportingPartyRepository dbReportingPartyRepository)
        {
            _dbRepository = dbRepository;
            _dbReportingPartyRepository = dbReportingPartyRepository;
        }

        [Route("api/complaints", Name = "ComplaintsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(int id)
        {
            try
            {
                _dbRepository.Delete(id);
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/complaints/all", Name = "ComplaintsGetDataRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/complaintTypes/{complaintTypeId}/complaints/all", Name = "ComplaintsGetDataByComplaintTypeIdRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetDataByComplaintTypeId(int complaintTypeId)
        {
            return _dbRepository.GetDataByComplaintTypeId(complaintTypeId).AsQueryable();
        }

        [Route("api/complaintTypes/{complaintTypeId}/complaints",
            Name = "ComplaintsGetDataByComplaintTypeIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataByComplaintTypeIdPageable(int complaintTypeId, string sortExpression, int page,
            int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataByComplaintTypeIdPageable(complaintTypeId, sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/complaints/all", Name = "ComplaintsGetDataByIdRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetDataById(int id)
        {
            return _dbRepository.GetDataById(id).AsQueryable();
        }

        [Route("api/reportingParties/{reportingPartyId}/complaints/all",
            Name = "ComplaintsGetDataByReportingPartyIdRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetDataByReportingPartyId(int reportingPartyId)
        {
            return _dbRepository.GetDataByReportingPartyId(reportingPartyId).AsQueryable();
        }

        [Route("api/reportingParties/{reportingPartyId}/complaints",
            Name = "ComplaintsGetDataByReportingPartyIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataByReportingPartyIdPageable(int reportingPartyId, string sortExpression,
            int page, int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataByReportingPartyIdPageable(reportingPartyId, sortExpression, page,
                pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/complaints", Name = "ComplaintsGetDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataPageable(string sortExpression, int page, int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataPageable(sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/complaints", Name = "ComplaintsInsertRoute")]
        [HttpPost]
        public int Insert(Complaint complaint)
        {
            if (complaint.ReportingParty.Id < 0)
            {
                complaint.ReportingPartyId = _dbReportingPartyRepository.Insert(complaint.ReportingParty);
            }
            else
            {
                _dbReportingPartyRepository.Update(complaint.ReportingParty);
            }
            return _dbRepository.Insert(complaint.ComplaintTypeId, complaint.Description, complaint.LocationDetails,
                complaint.ReportingPartyId);
        }

        [Route("api/complaints", Name = "ComplaintsUpdateRoute")]
        [HttpPut]
        public void Update(Complaint complaint)
        {
            _dbRepository.Update(complaint.ComplaintTypeId, complaint.Description, complaint.LocationDetails,
                complaint.ReportingPartyId, complaint.Id);
        }
    }
}