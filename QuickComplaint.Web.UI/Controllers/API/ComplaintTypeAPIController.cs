//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using QuickComplaint.Data.Entities;
using QuickComplaint.Data.Repository;

namespace QuickComplaint.Web.UI.Controllers.Api
{
    public class ComplaintTypeApiController : ApiController
    {
        private readonly IComplaintTypeRepository _dbRepository;

        public ComplaintTypeApiController(IComplaintTypeRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }

        [Route("api/complaintTypes", Name = "ComplaintTypesDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(int id)
        {
            try
            {
                _dbRepository.Delete(id);
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/complaintTypes/all", Name = "ComplaintTypesGetDataRoute")]
        [HttpGet]
        public IQueryable<ComplaintType> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/complaintTypes/{id}", Name = "ComplaintTypesGetDataByIdRoute")]
        [HttpGet]
        public IQueryable<ComplaintType> GetDataById(int id)
        {
            return _dbRepository.GetDataById(id).AsQueryable();
        }

        [Route("api/complaintTypes", Name = "ComplaintTypesGetDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataPageable(string sortExpression, int page, int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataPageable(sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/complaintTypes", Name = "ComplaintTypesInsertRoute")]
        [HttpPost]
        public int Insert(ComplaintType complaintType)
        {
            return _dbRepository.Insert(complaintType.Name);
        }

        [Route("api/complaintTypes", Name = "ComplaintTypesUpdateRoute")]
        [HttpPut]
        public void Update(ComplaintType complaintType)
        {
            _dbRepository.Update(complaintType.Name, complaintType.Id);
        }
    }
}