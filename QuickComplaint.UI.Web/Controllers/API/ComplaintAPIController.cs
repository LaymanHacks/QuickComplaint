//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using QuickComplaint.Data.DbCommandProvider;
using QuickComplaint.Data.Repository;
using QuickComplaint.Domain.Entities;

namespace QuickComplaint.Web.UI.Controllers.Api
{
    public class ComplaintApiController : ApiController
    {
        private readonly IComplaintRepository _dbRepository;

        public ComplaintApiController(IComplaintRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
        [Route("api/complaints/all", Name = "ComplaintsGetDataRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/complaints", Name = "ComplaintsUpdateRoute")]
        [HttpPut]
        public void Update(Complaint complaint)
        {
            _dbRepository.Update( (Int32)complaint.ComplaintTypeId, complaint.Description, complaint.LocationDetails,  (Int32)complaint.ReportingPartyId,  (Int32)complaint.Id);
          }

        [Route("api/complaints", Name = "ComplaintsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 id)
        {
            try
            {
                 _dbRepository.Delete(id);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/complaints", Name = "ComplaintsInsertRoute")]
        [HttpPost]
        public Int32 Insert(Complaint complaint)
        {
             return _dbRepository.Insert( (Int32)complaint.ComplaintTypeId, complaint.Description, complaint.LocationDetails,  (Int32)complaint.ReportingPartyId);
          }

        [Route("api/complaints", Name = "ComplaintsGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = new PagedResult(page, pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/complaints/all", Name = "ComplaintsGetDataByIdRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetDataById(Int32 id) 
        {
            return _dbRepository.GetDataById(id).AsQueryable();
        }

        [Route("api/complaintTypes/{complaintTypeId}/complaints/all", Name = "ComplaintsGetDataByComplaintTypeIdRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetDataByComplaintTypeId(Int32 complaintTypeId) 
        {
            return _dbRepository.GetDataByComplaintTypeId(complaintTypeId).AsQueryable();
        }

        [Route("api/complaintTypes/{complaintTypeId}/complaints", Name = "ComplaintsGetDataByComplaintTypeIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByComplaintTypeIdPageable(Int32 complaintTypeId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByComplaintTypeIdPageable(complaintTypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByComplaintTypeIdRowCount(complaintTypeId);
            var pagedResults = new PagedResult(page, pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/reportingParties/{reportingPartyId}/complaints/all", Name = "ComplaintsGetDataByReportingPartyIdRoute")]
        [HttpGet]
        public IQueryable<Complaint> GetDataByReportingPartyId(Int32 reportingPartyId) 
        {
            return _dbRepository.GetDataByReportingPartyId(reportingPartyId).AsQueryable();
        }

        [Route("api/reportingParties/{reportingPartyId}/complaints", Name = "ComplaintsGetDataByReportingPartyIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByReportingPartyIdPageable(Int32 reportingPartyId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByReportingPartyIdPageable(reportingPartyId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByReportingPartyIdRowCount(reportingPartyId);
            var pagedResults = new PagedResult(page, pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
