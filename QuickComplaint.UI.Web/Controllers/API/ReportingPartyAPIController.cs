//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using QuickComplaint.Data.DbCommandProvider;
using QuickComplaint.Data.Repository;
using QuickComplaint.Domain.Entities;

namespace QuickComplaint.Web.UI.Controllers.Api
{
    public class ReportingPartyApiController : ApiController
    {
        private readonly IReportingPartyRepository _dbRepository;

        public ReportingPartyApiController(IReportingPartyRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
        [Route("api/reportingParties/all", Name = "ReportingPartiesGetDataRoute")]
        [HttpGet]
        public IQueryable<ReportingParty> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/reportingParties", Name = "ReportingPartiesUpdateRoute")]
        [HttpPut]
        public void Update(ReportingParty reportingParty)
        {
            _dbRepository.Update( (string)reportingParty.Name, reportingParty.Email, reportingParty.Phone1, reportingParty.Phone1TypeId, reportingParty.Phone2, reportingParty.Phone2TypeId,  (Int32)reportingParty.Id);
          }

        [Route("api/reportingParties", Name = "ReportingPartiesDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 id)
        {
            try
            {
                 _dbRepository.Delete(id);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/reportingParties", Name = "ReportingPartiesInsertRoute")]
        [HttpPost]
        public Int32 Insert(ReportingParty reportingParty)
        {
             return _dbRepository.Insert( (string)reportingParty.Name, reportingParty.Email, reportingParty.Phone1, reportingParty.Phone1TypeId, reportingParty.Phone2, reportingParty.Phone2TypeId);
          }

        [Route("api/reportingParties", Name = "ReportingPartiesGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = new PagedResult(page, pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/reportingParties/{id}", Name = "ReportingPartiesGetDataByIdRoute")]
        [HttpGet]
        public IQueryable<ReportingParty> GetDataById(Int32 id) 
        {
            return _dbRepository.GetDataById(id).AsQueryable();
        }

        [Route("api/phoneTypes/{phone1TypeId}/reportingParties/all", Name = "ReportingPartiesGetDataByPhone1TypeIdRoute")]
        [HttpGet]
        public IQueryable<ReportingParty> GetDataByPhone1TypeId(Int32 phone1TypeId) 
        {
            return _dbRepository.GetDataByPhone1TypeId(phone1TypeId).AsQueryable();
        }

        [Route("api/phoneTypes/{phone1TypeId}/reportingParties", Name = "ReportingPartiesGetDataByPhone1TypeIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByPhone1TypeIdPageable(Int32 phone1TypeId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByPhone1TypeIdPageable(phone1TypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByPhone1TypeIdRowCount(phone1TypeId);
            var pagedResults = new PagedResult(page, pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/phoneTypes/{phone2TypeId}/reportingParties/all", Name = "ReportingPartiesGetDataByPhone2TypeIdRoute")]
        [HttpGet]
        public IQueryable<ReportingParty> GetDataByPhone2TypeId(Int32 phone2TypeId) 
        {
            return _dbRepository.GetDataByPhone2TypeId(phone2TypeId).AsQueryable();
        }

        [Route("api/phoneTypes/{phone2TypeId}/reportingParties", Name = "ReportingPartiesGetDataByPhone2TypeIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByPhone2TypeIdPageable(Int32 phone2TypeId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByPhone2TypeIdPageable(phone2TypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByPhone2TypeIdRowCount(phone2TypeId);
            var pagedResults = new PagedResult(page, pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
