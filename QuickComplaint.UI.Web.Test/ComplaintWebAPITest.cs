//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using QuickComplaint.Data.Repository;
using QuickComplaint.Domain.Entities;
using QuickComplaint.Web.UI.Controllers.Api;

namespace QuickComplaint.Web.UI.Test.Controllers.Api
{
    [TestClass()]
    public class ComplaintApiControllerTests
    {
        
        private Mock<IComplaintRepository> _repository;

        private List<Complaint> _repositoryList = new List<Complaint>
        {
        //TODO Initialize test data
            new Complaint()
        };

        private ComplaintApiController _target;
        
        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IComplaintRepository>();
            _target = new ComplaintApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Complaints") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }
   
                [TestMethod()]
        public void GetDataTest() 
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);
                
            var result = _target.GetData().ToList();
             Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Complaint() 
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, String, String, Int32, Int32>((complaintTypeId, description, locationDetails, reportingPartyId, id) => 
            { 
                 var tComplaint = _repositoryList.Find(x => x.Id==id);
                 tComplaint.ComplaintTypeId = complaintTypeId; 
                 tComplaint.Description = description; 
                 tComplaint.LocationDetails = locationDetails; 
                 tComplaint.ReportingPartyId = reportingPartyId; 
            });
            var tempComplaint = _repositoryList.Find(x => x.Id==id);
            var testComplaint = new Complaint {
                 Id = tempComplaint.Id, 
                 ComplaintTypeId = tempComplaint.ComplaintTypeId, 
                 Description = tempComplaint.Description, 
                 LocationDetails = tempComplaint.LocationDetails, 
                 ReportingPartyId = tempComplaint.ReportingPartyId};
            
            //TODO change something on testComplaint
            //testComplaint.oldValue = newValue; 
            _target.Update(testComplaint);
            //Assert.AreEqual(newValue, _repositoryList.Find(x => x.Id==1).oldValue);
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Complaint() 
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>()))  
                 .Callback<Int32>((id) => 
                 { 
                      var i = _repositoryList.FindIndex(q => q.Id==id);
                      _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Complaint() 
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, String, Int32>((complaintTypeId, description, locationDetails, reportingPartyId) => 
            { 
                 _repositoryList.Add(new  Complaint (complaintTypeId, description, locationDetails, reportingPartyId));
            });
            
            //TODO insert values 
            _target.Insert(new Complaint (complaintTypeId, description, locationDetails, reportingPartyId));
            //Assert.AreEqual(11, _repositoryList.Count());
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Complaint> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Complaint>(query.OrderBy(q => q.Id));
                              break;
                          case  "ComplaintTypeId":
                              query = new List<Complaint>(query.OrderBy(q => q.ComplaintTypeId));
                              break;
                          case  "Description":
                              query = new List<Complaint>(query.OrderBy(q => q.Description));
                              break;
                          case  "LocationDetails":
                              query = new List<Complaint>(query.OrderBy(q => q.LocationDetails));
                              break;
                          case  "ReportingPartyId":
                              query = new List<Complaint>(query.OrderBy(q => q.ReportingPartyId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("Id", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }

        [TestMethod()]
        public void GetDataByIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataById(It.IsAny<Int32>()))
                     .Returns<Int32>((id) => 
                 { 
                      return _repositoryList.Where(x => x.Id==id).ToList();
                 });
                
            var result = _target.GetDataById(idValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.Id==idValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByComplaintTypeIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByComplaintTypeId(It.IsAny<Int32>()))
                     .Returns<Int32>((complaintTypeId) => 
                 { 
                      return _repositoryList.Where(x => x.ComplaintTypeId==complaintTypeId).ToList();
                 });
                
            var result = _target.GetDataByComplaintTypeId(complaintTypeIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ComplaintTypeId==complaintTypeIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByComplaintTypeIdPageableTest()
        {
            PagedResult<Complaint> expectedResult;

            _repository
                 .Setup(it => it.GetDataByComplaintTypeIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((complaintTypeId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ComplaintTypeId==complaintTypeId);
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Complaint>(query.OrderBy(q => q.Id));
                              break;
                          case  "ComplaintTypeId":
                              query = new List<Complaint>(query.OrderBy(q => q.ComplaintTypeId));
                              break;
                          case  "Description":
                              query = new List<Complaint>(query.OrderBy(q => q.Description));
                              break;
                          case  "LocationDetails":
                              query = new List<Complaint>(query.OrderBy(q => q.LocationDetails));
                              break;
                          case  "ReportingPartyId":
                              query = new List<Complaint>(query.OrderBy(q => q.ReportingPartyId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByComplaintTypeIdRowCount(complaintTypeId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByComplaintTypeIdPageable(ComplaintTypeIdValue, "Id", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ComplaintTypeId==complaintTypeId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ComplaintTypeId==complaintTypeId).OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }

        [TestMethod()]
        public void GetDataByReportingPartyIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByReportingPartyId(It.IsAny<Int32>()))
                     .Returns<Int32>((reportingPartyId) => 
                 { 
                      return _repositoryList.Where(x => x.ReportingPartyId==reportingPartyId).ToList();
                 });
                
            var result = _target.GetDataByReportingPartyId(reportingPartyIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ReportingPartyId==reportingPartyIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByReportingPartyIdPageableTest()
        {
            PagedResult<Complaint> expectedResult;

            _repository
                 .Setup(it => it.GetDataByReportingPartyIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((reportingPartyId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ReportingPartyId==reportingPartyId);
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Complaint>(query.OrderBy(q => q.Id));
                              break;
                          case  "ComplaintTypeId":
                              query = new List<Complaint>(query.OrderBy(q => q.ComplaintTypeId));
                              break;
                          case  "Description":
                              query = new List<Complaint>(query.OrderBy(q => q.Description));
                              break;
                          case  "LocationDetails":
                              query = new List<Complaint>(query.OrderBy(q => q.LocationDetails));
                              break;
                          case  "ReportingPartyId":
                              query = new List<Complaint>(query.OrderBy(q => q.ReportingPartyId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByReportingPartyIdRowCount(reportingPartyId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByReportingPartyIdPageable(ReportingPartyIdValue, "Id", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ReportingPartyId==reportingPartyId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ReportingPartyId==reportingPartyId).OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }


    }
}
