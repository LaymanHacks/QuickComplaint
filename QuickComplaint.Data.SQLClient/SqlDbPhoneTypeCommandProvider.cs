//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System.Data;
using System.Data.SqlClient;
using QuickComplaint.Data.DbCommandProvider;

namespace QuickComplaint.Data.SqlDbCommandProvider
{
    public class SqlDbPhoneTypeCommandProvider : IDbPhoneTypeCommandProvider
    {
        public SqlDbPhoneTypeCommandProvider()
        {
            PhoneTypeDbConnectionHolder = new DbConnectionHolder(DbConnectionName);
        }

        public string DbConnectionName => "QuickComplaintConnection";

        public DbConnectionHolder PhoneTypeDbConnectionHolder { get; }

        /// <summary>
        ///     Selects one or more records from the PhoneType table
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataDbCommand()
        {
            var command = new SqlCommand("PhoneType_Select");
            command.CommandType = CommandType.StoredProcedure;
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Updates one or more records from the PhoneType table
        /// </summary>
        /// <param name="name" />
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetUpdateDbCommand(string name, int id)
        {
            var command = new SqlCommand("PhoneType_Update");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.NVarChar, name));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Deletes one or more records from the PhoneType table
        /// </summary>
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetDeleteDbCommand(int id)
        {
            var command = new SqlCommand("PhoneType_Delete");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Inserts a record into the PhoneType table on the database.
        /// </summary>
        /// <param name="name" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetInsertDbCommand(string name)
        {
            var command = new SqlCommand("PhoneType_Insert");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.NVarChar, name));
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetDataPageable returns a IDataReader populated with a subset of data from PhoneType
        /// </summary>
        /// <param name="sortExpression" />
        /// <param name="page" />
        /// <param name="pageSize" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataPageableDbCommand(string sortExpression, int page, int pageSize)
        {
            var command = new SqlCommand("PhoneType_GetDataPageable");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar,
                sortExpression));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize));
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetRowCount returns the row count for PhoneType
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetRowCountDbCommand()
        {
            var command = new SqlCommand("PhoneType_GetRowCount");
            command.CommandType = CommandType.StoredProcedure;
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function  GetDataById returns a IDataReader for PhoneType
        /// </summary>
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataByIdDbCommand(int id)
        {
            var command = new SqlCommand("PhoneType_GetDataById");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection) PhoneTypeDbConnectionHolder.Connection;
            return command;
        }
    }
}