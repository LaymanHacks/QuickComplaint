//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using QuickComplaint.Data.DbCommandProvider;


namespace QuickComplaint.Data.SqlDbCommandProvider 
{

    public class SqlDbReportingPartyCommandProvider : IDbReportingPartyCommandProvider
    {

        public SqlDbReportingPartyCommandProvider()
        {
            ReportingPartyDbConnectionHolder = new DbConnectionHolder(DbConnectionName);
        }

        public string DbConnectionName => "QuickComplaintConnection"; 

        public DbConnectionHolder ReportingPartyDbConnectionHolder { get; }

        /// <summary>
        /// Selects one or more records from the ReportingParty table 
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataDbCommand()
        {
            var command = new SqlCommand("ReportingParty_Select");
            command.CommandType = CommandType.StoredProcedure;
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Updates one or more records from the ReportingParty table 
        /// </summary>
        /// <param name="name" />
        /// <param name="email" />
        /// <param name="phone1" />
        /// <param name="phone1TypeId" />
        /// <param name="phone2" />
        /// <param name="phone2TypeId" />
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetUpdateDbCommand(string name, string email, string phone1, Int32?  phone1TypeId, string phone2, Int32?  phone2TypeId, Int32 id)
        {
            var command = new SqlCommand("ReportingParty_Update");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.NVarChar, name));
            if (!string.IsNullOrEmpty(email) ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, null));
            }
            if (!string.IsNullOrEmpty(phone1) ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1", SqlDbType.NVarChar, phone1));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1", SqlDbType.NVarChar, null));
            }
            if (phone1TypeId != null ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, phone1TypeId));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, null));
            }
            if (!string.IsNullOrEmpty(phone2) ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2", SqlDbType.NVarChar, phone2));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2", SqlDbType.NVarChar, null));
            }
            if (phone2TypeId != null ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, phone2TypeId));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, null));
            }
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Deletes one or more records from the ReportingParty table 
        /// </summary>
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetDeleteDbCommand(Int32 id)
        {
            var command = new SqlCommand("ReportingParty_Delete");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Inserts a record into the ReportingParty table on the database.
        /// </summary>
        /// <param name="name" />
        /// <param name="email" />
        /// <param name="phone1" />
        /// <param name="phone1TypeId" />
        /// <param name="phone2" />
        /// <param name="phone2TypeId" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetInsertDbCommand(string name, string email, string phone1, Int32?  phone1TypeId, string phone2, Int32?  phone2TypeId)
        {
            var command = new SqlCommand("ReportingParty_Insert");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.NVarChar, name));
            if (!string.IsNullOrEmpty(email) ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, null));
            }
            if (!string.IsNullOrEmpty(phone1) ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1", SqlDbType.NVarChar, phone1));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1", SqlDbType.NVarChar, null));
            }
            if (phone1TypeId != null ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, phone1TypeId));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, null));
            }
            if (!string.IsNullOrEmpty(phone2) ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2", SqlDbType.NVarChar, phone2));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2", SqlDbType.NVarChar, null));
            }
            if (phone2TypeId != null ) {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, phone2TypeId));
            }else{
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, null));
            }
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetDataPageable returns a IDataReader populated with a subset of data from ReportingParty
        /// </summary>
        /// <param name="sortExpression" />
        /// <param name="page" />
        /// <param name="pageSize" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataPageableDbCommand(string sortExpression, Int32 page, Int32 pageSize)
        {
            var command = new SqlCommand("ReportingParty_GetDataPageable");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetRowCountDbCommand()
        {
            var command = new SqlCommand("ReportingParty_GetRowCount");
            command.CommandType = CommandType.StoredProcedure;
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function  GetDataById returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByIdDbCommand(Int32 id)
        {
            var command = new SqlCommand("ReportingParty_GetDataById");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetDataByPhone1TypeId returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="phone1TypeId" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByPhone1TypeIdDbCommand(Int32 phone1TypeId)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhone1TypeId");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, phone1TypeId));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetDataBy GetDataByPhone1TypeIdPageable returns a IDataReader populated with a subset of data from ReportingParty
        /// </summary>
        /// <param name="phone1TypeId" />
        /// <param name="sortExpression" />
        /// <param name="page" />
        /// <param name="pageSize" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByPhone1TypeIdPageableDbCommand(Int32 phone1TypeId, string sortExpression, Int32 page, Int32 pageSize)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhone1TypeIdPageable");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, phone1TypeId));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <param name="phone1TypeId" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByPhone1TypeIdRowCountDbCommand(Int32 phone1TypeId)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhone1TypeIdRowCount");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone1TypeId", SqlDbType.Int, phone1TypeId));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetDataByPhone2TypeId returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="phone2TypeId" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByPhone2TypeIdDbCommand(Int32 phone2TypeId)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhone2TypeId");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, phone2TypeId));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetDataBy GetDataByPhone2TypeIdPageable returns a IDataReader populated with a subset of data from ReportingParty
        /// </summary>
        /// <param name="phone2TypeId" />
        /// <param name="sortExpression" />
        /// <param name="page" />
        /// <param name="pageSize" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByPhone2TypeIdPageableDbCommand(Int32 phone2TypeId, string sortExpression, Int32 page, Int32 pageSize)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhone2TypeIdPageable");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, phone2TypeId));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar, sortExpression));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
        /// <summary>
        /// Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <param name="phone2TypeId" />
        /// <returns></returns>
        /// <remarks></remarks> 
        public IDbCommand GetGetDataByPhone2TypeIdRowCountDbCommand(Int32 phone2TypeId)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhone2TypeIdRowCount");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Phone2TypeId", SqlDbType.Int, phone2TypeId));
            command.Connection = (SqlConnection)ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
    }
}
