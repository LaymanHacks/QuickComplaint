//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System.Data;
using System.Data.SqlClient;
using QuickComplaint.Data.DbCommandProvider;

namespace QuickComplaint.Data.SqlDbCommandProvider
{
    public class SqlDbReportingPartyCommandProvider : IDbReportingPartyCommandProvider
    {
        public SqlDbReportingPartyCommandProvider()
        {
            ReportingPartyDbConnectionHolder = new DbConnectionHolder(DbConnectionName);
        }

        public string DbConnectionName => "QuickComplaintConnection";

        public DbConnectionHolder ReportingPartyDbConnectionHolder { get; }

        /// <summary>
        ///     Selects one or more records from the ReportingParty table
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataDbCommand()
        {
            var command = new SqlCommand("ReportingParty_Select");
            command.CommandType = CommandType.StoredProcedure;
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Updates one or more records from the ReportingParty table
        /// </summary>
        /// <param name="name" />
        /// <param name="email" />
        /// <param name="phone" />
        /// <param name="phoneTypeId" />
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetUpdateDbCommand(string name, string email, string phone, int? phoneTypeId, int id)
        {
            var command = new SqlCommand("ReportingParty_Update");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.NVarChar, name));
            if (!string.IsNullOrEmpty(email))
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email));
            }
            else
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, null));
            }
            if (!string.IsNullOrEmpty(phone))
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phone", SqlDbType.NVarChar, phone));
            }
            else
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phone", SqlDbType.NVarChar, null));
            }
            if (phoneTypeId != null)
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int,
                    phoneTypeId));
            }
            else
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int, null));
            }

            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Deletes one or more records from the ReportingParty table
        /// </summary>
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetDeleteDbCommand(int id)
        {
            var command = new SqlCommand("ReportingParty_Delete");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Inserts a record into the ReportingParty table on the database.
        /// </summary>
        /// <param name="name" />
        /// <param name="email" />
        /// <param name="phone" />
        /// <param name="phoneTypeId" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetInsertDbCommand(string name, string email, string phone, int? phoneTypeId)
        {
            var command = new SqlCommand("ReportingParty_Insert");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.NVarChar, name));
            if (!string.IsNullOrEmpty(email))
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, email));
            }
            else
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.NVarChar, null));
            }
            if (!string.IsNullOrEmpty(phone))
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phone", SqlDbType.NVarChar, phone));
            }
            else
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phone", SqlDbType.NVarChar, null));
            }
            if (phoneTypeId != null)
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int,
                    phoneTypeId));
            }
            else
            {
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int, null));
            }

            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetDataPageable returns a IDataReader populated with a subset of data from ReportingParty
        /// </summary>
        /// <param name="sortExpression" />
        /// <param name="page" />
        /// <param name="pageSize" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataPageableDbCommand(string sortExpression, int page, int pageSize)
        {
            var command = new SqlCommand("ReportingParty_GetDataPageable");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar,
                sortExpression));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetRowCountDbCommand()
        {
            var command = new SqlCommand("ReportingParty_GetRowCount");
            command.CommandType = CommandType.StoredProcedure;
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function  GetDataById returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="id" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataByIdDbCommand(int id)
        {
            var command = new SqlCommand("ReportingParty_GetDataById");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.Int, id));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetDataByPhoneTypeId returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="phoneTypeId" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataByPhoneTypeIdDbCommand(int phoneTypeId)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhoneTypeId");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int, phoneTypeId));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetDataBy GetDataByPhoneTypeIdPageable returns a IDataReader populated with a subset of data from
        ///     ReportingParty
        /// </summary>
        /// <param name="phoneTypeId" />
        /// <param name="sortExpression" />
        /// <param name="page" />
        /// <param name="pageSize" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataByPhoneTypeIdPageableDbCommand(int phoneTypeId, string sortExpression, int page,
            int pageSize)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhoneTypeIdPageable");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int, phoneTypeId));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.VarChar,
                sortExpression));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page));
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <param name="phoneTypeId" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetGetDataByPhoneTypeIdRowCountDbCommand(int phoneTypeId)
        {
            var command = new SqlCommand("ReportingParty_GetDataByPhoneTypeIdRowCount");
            command.CommandType = CommandType.StoredProcedure;
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@phoneTypeId", SqlDbType.Int, phoneTypeId));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }

        /// <summary>
        ///     Search for ReportingParty
        /// </summary>
        /// <param name="searchValue" />
        /// <returns></returns>
        /// <remarks></remarks>
        public IDbCommand GetSearchDbCommand(string searchValue)
        {
            var command = new SqlCommand("ReportingParty_Search") {CommandType = CommandType.StoredProcedure};
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SearchValue", SqlDbType.VarChar,
                searchValue));
            command.Connection = (SqlConnection) ReportingPartyDbConnectionHolder.Connection;
            return command;
        }
    }
}