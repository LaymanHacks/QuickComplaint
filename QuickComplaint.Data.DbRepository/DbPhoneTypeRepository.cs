//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using QuickComplaint.Data;
using QuickComplaint.Domain.Entities;
using QuickComplaint.Data.DbCommandProvider;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using Data;


namespace QuickComplaint.Data.Repository
{
    [DataObject(true)]
    public class DbPhoneTypeRepository : IPhoneTypeRepository, IDisposable
    {

        private readonly IDbPhoneTypeCommandProvider _dbPhoneTypeCommandProvider;
        private DbConnectionHolder _dbConnHolder;

        public DbPhoneTypeRepository(IDbPhoneTypeCommandProvider dbPhoneTypeCommandProvider)
        {
            _dbPhoneTypeCommandProvider = dbPhoneTypeCommandProvider;
            _dbConnHolder = _dbPhoneTypeCommandProvider.PhoneTypeDbConnectionHolder;
        }

        /// <summary>
        /// Selects one or more records from the PhoneType table 
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ICollection<PhoneType> GetData()
        {
            var command = _dbPhoneTypeCommandProvider.GetGetDataDbCommand();
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<PhoneType>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new PhoneType(reader.GetInt32("Id"), reader.GetString("Name"));
                entList.Add(tempEntity);
            }
            reader.Close();
            return entList;

        }

        /// <summary>
        /// Updates one or more records from the PhoneType table 
        /// </summary>
        /// <param name="name"></param>
        /// <param name="id"></param>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(string name, Int32 id)
        {
            var command = _dbPhoneTypeCommandProvider.GetUpdateDbCommand(name, id);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            command.ExecuteNonQuery();
            _dbConnHolder.Close();
        }

        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public void Update(PhoneType phoneType)
        {
            Update((string)phoneType.Name, (Int32)phoneType.Id);
        }

        /// <summary>
        /// Deletes one or more records from the PhoneType table 
        /// </summary>
        /// <param name="id"></param>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public void Delete(Int32 id)
        {
            var command = _dbPhoneTypeCommandProvider.GetDeleteDbCommand(id);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            command.ExecuteNonQuery();
            _dbConnHolder.Close();
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public void Delete(PhoneType phoneType)
        {
            Delete((Int32)phoneType.Id);
        }

        /// <summary>
        /// Inserts an entity of PhoneType into the database.
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public Int32 Insert(string name)
        {
            var command = _dbPhoneTypeCommandProvider.GetInsertDbCommand(name);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var returnValue = Convert.ToInt32(command.ExecuteScalar());
            _dbConnHolder.Close();
            return returnValue;

        }

        [DataObjectMethod(DataObjectMethodType.Insert, false)]
        public Int32 Insert(PhoneType phoneType)
        {
            return Insert((string)phoneType.Name);
        }

        /// <summary>
        /// Function GetDataPageable returns a IDataReader populated with a subset of data from PhoneType
        /// </summary>
        /// <param name="sortExpression"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PagedResult<PhoneType> GetDataPageable(string sortExpression, Int32 page, Int32 pageSize)
        {
            var command = _dbPhoneTypeCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<PhoneType>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new PhoneType(reader.GetInt32("Id"), reader.GetString("Name"));
                entList.Add(tempEntity);
            }
            reader.Close();
            var totalCount = GetRowCount();
            var pagedResults = new PagedResult<PhoneType>(page, pageSize, totalCount, entList);
            return pagedResults;

        }

        /// <summary>
        /// Function GetRowCount returns the row count for PhoneType
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public Int32 GetRowCount()
        {
            var command = _dbPhoneTypeCommandProvider.GetGetRowCountDbCommand();
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var returnValue = Convert.ToInt32(command.ExecuteScalar());
            _dbConnHolder.Close();
            return returnValue;

        }

        /// <summary>
        /// Function  GetDataById returns a IDataReader for PhoneType
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ICollection<PhoneType> GetDataById(Int32 id)
        {
            var command = _dbPhoneTypeCommandProvider.GetGetDataByIdDbCommand(id);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<PhoneType>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new PhoneType(reader.GetInt32("Id"), reader.GetString("Name"));
                entList.Add(tempEntity);
            }
            reader.Close();
            return entList;

        }

        #region "IDisposable Support"
        private bool disposedValue;
        protected virtual void Dispose(bool disposing)
        {
            if (!this.disposedValue)
            {
                if (disposing)
                {
                    switch (_dbConnHolder.Connection.State)
                    {
                        case ConnectionState.Open:
                            _dbConnHolder.Close();
                            break;
                    }
                    _dbConnHolder = null;
                }
            }
            this.disposedValue = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        #endregion

    }
}
