//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using QuickComplaint.Data.DbCommandProvider;
using QuickComplaint.Data.Entities;

namespace QuickComplaint.Data.Repository
{
    [DataObject(true)]
    public class DbReportingPartyRepository : IReportingPartyRepository, IDisposable
    {
        private readonly IDbReportingPartyCommandProvider _dbReportingPartyCommandProvider;
        private DbConnectionHolder _dbConnHolder;

        public DbReportingPartyRepository(IDbReportingPartyCommandProvider dbReportingPartyCommandProvider)
        {
            _dbReportingPartyCommandProvider = dbReportingPartyCommandProvider;
            _dbConnHolder = _dbReportingPartyCommandProvider.ReportingPartyDbConnectionHolder;
        }

        /// <summary>
        ///     Selects one or more records from the ReportingParty table
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public ICollection<ReportingParty> GetData()
        {
            var command = _dbReportingPartyCommandProvider.GetGetDataDbCommand();
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<ReportingParty>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new ReportingParty(reader.GetInt32("Id"), reader.GetString("Name"),
                    reader.GetString("Email"), reader.GetString("Phone"), reader.GetNullableInt32("PhoneTypeId"));
                entList.Add(tempEntity);
            }
            reader.Close();
            return entList;
        }

        /// <summary>
        ///     Updates one or more records from the ReportingParty table
        /// </summary>
        /// <param name="name"></param>
        /// <param name="email"></param>
        /// <param name="phone"></param>
        /// <param name="phoneTypeId"></param>
        
        /// <param name="id"></param>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public void Update(string name, string email, string phone, int? phoneTypeId,int id)
        {
            var command = _dbReportingPartyCommandProvider.GetUpdateDbCommand(name, email, phone, phoneTypeId, id);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            command.ExecuteNonQuery();
            _dbConnHolder.Close();
        }

        [DataObjectMethod(DataObjectMethodType.Update, false)]
        public void Update(ReportingParty reportingParty)
        {
            Update(reportingParty.Name, reportingParty.Email, reportingParty.phone, reportingParty.phoneTypeId, reportingParty.Id);
        }

        /// <summary>
        ///     Deletes one or more records from the ReportingParty table
        /// </summary>
        /// <param name="id"></param>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public void Delete(int id)
        {
            var command = _dbReportingPartyCommandProvider.GetDeleteDbCommand(id);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            command.ExecuteNonQuery();
            _dbConnHolder.Close();
        }

        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public void Delete(ReportingParty reportingParty)
        {
            Delete(reportingParty.Id);
        }

        /// <summary>
        ///     Inserts an entity of ReportingParty into the database.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="email"></param>
        /// <param name="phone"></param>
        /// <param name="phoneTypeId"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public int Insert(string name, string email, string phone, int? phoneTypeId)
        {
            var command = _dbReportingPartyCommandProvider.GetInsertDbCommand(name, email, phone, phoneTypeId);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var returnValue = Convert.ToInt32(command.ExecuteScalar());
            _dbConnHolder.Close();
            return returnValue;
        }

        [DataObjectMethod(DataObjectMethodType.Insert, false)]
        public int Insert(ReportingParty reportingParty)
        {
            return Insert(reportingParty.Name, reportingParty.Email, reportingParty.phone, reportingParty.phoneTypeId);
        }

        /// <summary>
        ///     Function GetDataPageable returns a IDataReader populated with a subset of data from ReportingParty
        /// </summary>
        /// <param name="sortExpression"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PagedResult<ReportingParty> GetDataPageable(string sortExpression, int page, int pageSize)
        {
            var command = _dbReportingPartyCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<ReportingParty>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new ReportingParty(reader.GetInt32("Id"), reader.GetString("Name"),
                    reader.GetString("Email"), reader.GetString("phone"), reader.GetNullableInt32("phoneTypeId"));
                entList.Add(tempEntity);
            }
            reader.Close();
            var totalCount = GetRowCount();
            var pagedResults = new PagedResult<ReportingParty>(page, pageSize, totalCount, entList);
            return pagedResults;
        }

        /// <summary>
        ///     Function  GetDataById returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ICollection<ReportingParty> GetDataById(int id)
        {
            var command = _dbReportingPartyCommandProvider.GetGetDataByIdDbCommand(id);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<ReportingParty>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new ReportingParty(reader.GetInt32("Id"), reader.GetString("Name"),
                    reader.GetString("Email"), reader.GetString("phone"), reader.GetNullableInt32("phoneTypeId"));
                entList.Add(tempEntity);
            }
            reader.Close();
            return entList;
        }

        /// <summary>
        ///     Function GetDataByphoneTypeId returns a IDataReader for ReportingParty
        /// </summary>
        /// <param name="phoneTypeId"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ICollection<ReportingParty> GetDataByphoneTypeId(int phoneTypeId)
        {
            var command = _dbReportingPartyCommandProvider.GetGetDataByphoneTypeIdDbCommand(phoneTypeId);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<ReportingParty>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new ReportingParty(reader.GetInt32("Id"), reader.GetString("Name"),
                    reader.GetString("Email"), reader.GetString("phone"), reader.GetNullableInt32("phoneTypeId"));
                entList.Add(tempEntity);
            }
            reader.Close();
            return entList;
        }

        /// <summary>
        ///     Function GetDataBy GetDataByphoneTypeIdPageable returns a IDataReader populated with a subset of data from
        ///     ReportingParty
        /// </summary>
        /// <param name="phoneTypeId"></param>
        /// <param name="sortExpression"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public PagedResult<ReportingParty> GetDataByphoneTypeIdPageable(int phoneTypeId, string sortExpression,
            int page, int pageSize)
        {
            var command = _dbReportingPartyCommandProvider.GetGetDataByphoneTypeIdPageableDbCommand(phoneTypeId,
                sortExpression, page, pageSize);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<ReportingParty>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new ReportingParty(reader.GetInt32("Id"), reader.GetString("Name"),
                    reader.GetString("Email"), reader.GetString("phone"), reader.GetNullableInt32("phoneTypeId"));
                entList.Add(tempEntity);
            }
            reader.Close();
            var totalCount = GetDataByphoneTypeIdRowCount(phoneTypeId);
            var pagedResults = new PagedResult<ReportingParty>(page, pageSize, totalCount, entList);
            return pagedResults;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="searchValue"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public ICollection<ReportingParty> Search(string searchValue)
        {
            var command = _dbReportingPartyCommandProvider.GetSearchDbCommand(searchValue);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var entList = new Collection<ReportingParty>();
            var reader = new SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection));
            while (reader.Read())
            {
                var tempEntity = new ReportingParty(reader.GetInt32("Id"), reader.GetString("Name"), reader.GetString("Email"), reader.GetString("Phone"), reader.GetNullableInt32("PhoneTypeId"));
                entList.Add(tempEntity);
            }
            reader.Close();
            return entList;

        }



        /// <summary>
        ///     Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <param name="phoneTypeId"></param>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public int GetDataByphoneTypeIdRowCount(int phoneTypeId)
        {
            var command = _dbReportingPartyCommandProvider.GetGetDataByphoneTypeIdRowCountDbCommand(phoneTypeId);
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var returnValue = Convert.ToInt32(command.ExecuteScalar());
            _dbConnHolder.Close();
            return returnValue;
        }

       

        /// <summary>
        ///     Function GetRowCount returns the row count for ReportingParty
        /// </summary>
        /// <returns></returns>
        /// <remarks></remarks>
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public int GetRowCount()
        {
            var command = _dbReportingPartyCommandProvider.GetGetRowCountDbCommand();
            command.Connection = _dbConnHolder.Connection;
            _dbConnHolder.Open();
            var returnValue = Convert.ToInt32(command.ExecuteScalar());
            _dbConnHolder.Close();
            return returnValue;
        }

        #region "IDisposable Support"

        private bool disposedValue;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    switch (_dbConnHolder.Connection.State)
                    {
                        case ConnectionState.Open:
                            _dbConnHolder.Close();
                            break;
                    }
                    _dbConnHolder = null;
                }
            }
            disposedValue = true;
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion
    }
}